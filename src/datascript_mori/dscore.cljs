(ns datascript-mori.dscore
  (:refer-clojure :exclude [filter])
  (:require
    [datascript.core :as d]))

(def ^:export q d/q)
(def ^:export db d/db)
(def ^:export entity d/entity)
(def ^:export entity_db d/entity-db)
(def ^:export datom d/datom)
(def ^:export pull d/pull)
(def ^:export pull_many d/pull-many)
(def ^:export touch d/touch)
(def ^:export empty_db d/empty-db)
(def ^:export init_db d/init-db)
(def ^:export datom_QMARK_ d/datom?)
(def ^:export db_QMARK_ d/db?)
(def ^:export is_filtered d/is-filtered)
(def ^:export filter d/filter)
(def ^:export with d/with)
(def ^:export db_with d/db-with)
(def ^:export datoms d/datoms)
(def ^:export seek_datoms d/seek-datoms)
(def ^:export index_range d/index-range)
(def ^:export entid d/entid)
(def ^:export conn_QMARK_ d/conn?)
(def ^:export conn_from_db d/conn-from-db)
(def ^:export conn_from_datoms d/conn-from-datoms)
(def ^:export create_conn d/create-conn)
(def ^:export transact_BANG_ d/transact!)
(def ^:export listen_BANG_ d/listen!)
(def ^:export unlisten_BANG_ d/unlisten!)
(def ^:export tempid d/tempid)
(def ^:export resolve_tempid d/resolve-tempid)
(def ^:export transact d/transact)
(def ^:export transact_async d/transact-async)
(def ^:export squuid d/squuid)
(def ^:export squuid_time_millis d/squuid-time-millis)
